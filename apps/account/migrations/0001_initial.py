# Generated by Django 5.2 on 2025-05-12 20:14

import apps.account.managers
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='Email')),
                ('username', models.CharField(max_length=12, unique=True, verbose_name='User name')),
                ('security_question', models.CharField(choices=[('maiden_name', "What is your mother's maiden name?"), ('pet_name', 'What is the name of your first pet?'), ('city_born', 'In what city were you born?'), ('birth_year', 'What year were you born?'), ('fav_color', 'What is your favorite color?')], max_length=30, verbose_name='Security questions')),
                ('security_answer', models.CharField(max_length=100, verbose_name='Security answer')),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('locked', 'locked'), ('deleted', 'Deleted')], default='active', max_length=10, verbose_name='Account status')),
                ('role', models.CharField(choices=[('customer', 'Customer'), ('account_executive', 'Account Executive'), ('teller', 'Teller'), ('branch_manager', 'Branch Manager')], default='customer', max_length=30, verbose_name='Role')),
                ('first_name', models.CharField(max_length=30, verbose_name='First name')),
                ('middle_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Middle name')),
                ('last_name', models.CharField(max_length=30, verbose_name='Last name')),
                ('id_no', models.PositiveIntegerField(unique=True, verbose_name='ID number')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, verbose_name='Failed login attempts')),
                ('last_login_attempt', models.DateTimeField(blank=True, null=True, verbose_name='Last login attempt')),
                ('otp', models.CharField(blank=True, max_length=6, null=True, verbose_name='OTP')),
                ('otp_expiry', models.DateTimeField(blank=True, null=True, verbose_name='OTP expiry')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', apps.account.managers.UserManager()),
            ],
        ),
    ]
